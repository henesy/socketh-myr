// Server for SocketH-Myr

use std
use thread


const	maxconns	= 100				// Maximum open clients
const	maxmsg		= 256				// Maximum message length
const	maxusrname	= 25				// Maximum user name length

var		connmtx		: thread.mutex		// Lock for conns[], I miss channels
var		conns		: std.fd[maxconns]	// All open connections

var		chatty							// Verbose debug logging
var		showprompt						// Enable showing the prompt
var		prompt							// Prompt to show, if any
var		sleeptime						// Period in ns to sleep


// Sends a message to all connections
const sendmsg = {msg : byte[:]
	thread.mtxlock(&connmtx)

	for fd : conns
		if fd != 0
			std.write(fd, msg)
		;;
	;;

	thread.mtxunlock(&connmtx)
}

// Removes a fd from open connections
const delconn = {fd : std.fd
	thread.mtxlock(&connmtx)

	var i
	for i = 0; i < conns.len; i++
		if fd == conns[i]
			conns[i] = 0
			break
		;;
	;;

	thread.mtxunlock(&connmtx)
}

// Adds an fd to the open connections
const addconn = {fd : std.fd
	thread.mtxlock(&connmtx)

	var i
	for i = 0; i < conns.len; i++
		if conns[i] == 0
			conns[i] = fd
			break
		;;
	;;

	thread.mtxunlock(&connmtx)
}

// Handles incoming connections (one per connection)
const handler = {fd : std.fd
	var usrbuf : byte[maxusrname]
	var username : byte[:]

	std.write(fd, "What is your username?: ")

	match std.read(fd, usrbuf[:])
	| `std.Ok	0:
		std.close(fd)
		-> void

	| `std.Ok	n:
		username = minimize(usrbuf[:])
		addconn(fd)
		var msg = std.fmt("→ {}\n", username)
		std.put(std.fmt("join: {}", msg))
		sendmsg(msg)

	| `std.Err	e:
		std.put("err: couldn't read username\n")
		std.close(fd)
		-> void
	;;

	// Standard disconnect logic
	var dc = {
		std.close(fd)
		var msg = std.fmt("← {}\n", username)
		std.put(std.fmt("part: {}", msg))
		sendmsg(msg)
		delconn(fd)
	}

	// Main chat loop
	while true
		var buf : byte[maxmsg]

		if showprompt
			std.write(fd, prompt)
		;;

		// Core connection handler
		match std.read(fd, buf[:])
		| `std.Ok	0:
			// EOF
			dc()
			-> void

		| `std.Ok	n:
			// Successful input line read
			var line = minimize(buf[:])

			// Match input line
			match line
			| "!quit":
				// Close the client connection
				std.put("info: clean dc by {}\n", username)
				std.write(fd, "Goodbye! ☺\n")
				dc()
				-> void
			| "":
				// Empty line
				;
			| s:
				// Chat message
				var msg = std.fmt("{} : {}\n", username, minimize(s))
				std.put(std.fmt("msg: {}", msg))
				sendmsg(msg)
			;;

		| `std.Err	e:
			std.put("info: hard dc by {}: {}\n", username, e)
			dc()
			-> void
		;;

		std.nanosleep(sleeptime)
	;;
}


// Server for a simple chat protocol
const main = {args : byte[:][:]
	var cmd
	var addr = "tcp!*!9090"
	sleeptime = 5_000_000
	showprompt = false

	// Commandline argument parsing
	cmd = std.optparse(args, &[
	    .argdesc = "",
	    .opts = [
	        [.opt='D',						.desc = "enable verbose logging"],
	        [.opt='P',						.desc = "enable prompt display"],
	        [.opt='p',	.arg = "prompt",	.desc = "set prompt to 'prompt'"],
	        [.opt='T',	.arg = "period",	.desc = "set sleep time to 'period' ns"],
	        [.opt='a',	.arg = "address",		.desc = "listen on dial string 'address'"],
	    ][:]
	])

	for opt : cmd.opts
	    match opt
	    | ('D', ""):
	    	chatty = true
	    | ('P', ""):
	    	showprompt = true
	    | ('p', arg):
	    	prompt = arg
	    | ('T', arg):
			match std.intparse(arg)
			| `std.Some v:
	    		sleeptime = v
			| `std.None:
				std.fatal("err: invalid argument for sleeptime")
			;;
	    | ('a', arg):
	    	addr = arg
	    | _:
	    	std.fatal("unreachable\n")
	    ;;
	;;

	// Initialize connections
	var i
	for i = 0; i < conns.len; i++
		conns[i] = 0
	;;

	// Start background listener
	thread.spawn({
		listener(addr)
	})

	// Main spin loop
	while true
		std.nanosleep(sleeptime)
	;;
}


// Listens for incoming connections, accepting if able
const listener = {addr : byte[:]
	var afd

	std.put("Listening on {}…\n", addr)

	match std.announce(addr)
	| `std.Ok	fd:
		afd = fd
	| `std.Err	e:
		std.fatal("err: couldn't announce: {}\n", e)
	;;

	// Core listen loop
	while true
		match std.accept(afd)
		| `std.Ok	fd:
			thread.spawn({
				handler(fd)
			})

		| `std.Err	e:
			std.put("err: couldn't accept: {}\n", e)
			-> void
		;;

		std.nanosleep(sleeptime)
	;;
}

// Minimize the input line to [0 , {\0 \n \r})
const minimize = {buf : byte[:]
	// We truncate once we find one of {\0, \n, \r}
	var cnt
	for cnt = 0; cnt < buf.len; cnt++
		match buf[cnt]
		| 0:
			break
		| 10:
			// \n
			break
		| 13:
			// \r
			break
		| _:
		;;
	;;

	-> buf[:cnt]
}
