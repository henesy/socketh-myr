// Server for SocketH-Myr

use std
use thread

const listener = {addr : byte[:]
	var afd
	
	std.put("Address: {}\n", addr)
	std.put("Listeningâ€¦\n")

	match std.announce(addr)
	| `std.Ok	f:	afd = f
	| `std.Err	e:	std.fatal("err: couldn't announce: {}\n", e)
	;;

	// Core listen loop
	while true
		std.put("listen tick\n")
		match std.accept(afd)
		| `std.Ok	fd:
			std.put("new thread\n")
			thread.spawn({
				while true
					std.put("while tick\n")
					var buf : byte[512]

					// Core connection handler
					match std.read(fd, buf[:])
					| `std.Ok	0:
						break

					| `std.Ok	n:
						// Successful input line read
						//std.writeall(fd, buf[:n])
						std.write(fd, "ack\n")

						std.put("buf = {}\n", buf)
						std.put("n = {}\n", n)

						var cnt
						for cnt = 0; cnt < buf.len; cnt++
							match buf[cnt]
							| 0:
								break
							| 10:
								// \n
								break
							| 13:
								// \r
								break
							| _:
							;;
						;;

						// TODO - why is `n` overflowed?
						std.put("cnt = {}\n", cnt)
						std.put("buf[:cnt] = {}\n", buf[:cnt])
						
						var line = buf[:cnt]


						// TODO - never get past this line?
						std.put("line = {}\n", line)

						// Match input line
						match line
						| "!quit":
							// Close the client connection
							std.put("info: clean dc\n")
							break
							std.close(fd)
						| "":
							// Empty line
							;
						| s:
							std.put("info: unknown cmd - {}\n", s)
						;;

						std.put("end of command match\n")

					| `std.Err	e: 
						std.put("info: disconnected: {}\n", e)
						break
					;;
	
					std.put("sleeping...\n")

					std.nanosleep(5_000)
				;;
			})

		| `std.Err	e:
			std.put("err: could not accept: {}\n", e)
			break
		;;

		std.nanosleep(5_000)
	;;
}

const main = {args : byte[:][:]
	// Print cmdline args
	for a : args
		std.put("arg = {}\n", a)
	;;

	var addr = "tcp!*!9090"

	thread.spawn({
		listener(addr)
	})

	while true
		std.nanosleep(5_000_000_000)
	;;
}
